#include<iostream>
#include<memory>

void f1()
{
    std::shared_ptr<int> p1 = std::make_shared<int>(90);
    std::shared_ptr<int>p2;
    
    p2 = p1;
    
    std::cout<<"p1 --> "<<*p1<<std::endl;
    std::cout<<"p2 --> "<<*p2<<std::endl;
    
    
    std::cout<<p1.use_count()<<std::endl;  // reference counting maintained
    std::cout<<p2.use_count()<<std::endl; // reference counting maintained
    
    std::cout<<p1.get()<<std::endl;   // address 
    std::cout<<p2.get()<<std::endl; // same as p1  
    
    
    p1.reset(); // Releases p1's ownership (but p2 still owns it) p1 = NULL 

    
    std::cout<<"p1---->"<<p1.get();   // address of nullptr is given
    std::cout<<"p2---->"<<p2.get();
}

int main()
{
    f1();
    
    return 0;
}


In shared_ptr , ownership is shared, multiple shared pointer share the ownership of the same object.
Internally shared_ptr maintains Reference count.  Checked using use_count() function.
The managed (raw) pointer is automatically deleted when the last shared_ptr (i.e., when use count becomes zero) is destroyed or reset.  [ .reset() ]

