#include<iostream>
#include<memory>

void f1()
{
    std::unique_ptr<int>p1(new int(90));
    std::cout<<*p1<<std::endl;
    
    std::unique_ptr<int>p2;
    p2 = p1;   // error :: copy assignment operator , copy constructor not supported
   
   p2 = std::move(p1);  // Transfers ownership from p1 to p2 , now p1 == NULL;
   std::cout<<*p2<<std::endl;
   
   std::cout<<*p1<<std::endl;   // run time crash , segmentation fault, undefined behavior 
   // always check unique_ptr is non-null before dereferencing


   std::unique_ptr<double>p3;
   p3 = std::move(p2);   // error as p3 is double type , so to transfer ownership type must be same

}

int main()
{
    f1();
    
    return 0;
}


// std::unique_ptr is a smart pointer class template.
// It wraps a raw pointer and ensures proper deletion of the object it owns.
// When the unique_ptr goes out of scope, it deletes the managed object.
// It supports only move semantics (no copy constructor or copy assignment [copy semantics]).
// Ownership can be transferred using std::move().
// After move, the source unique_ptr becomes null.
// Always check for null before dereferencing.
