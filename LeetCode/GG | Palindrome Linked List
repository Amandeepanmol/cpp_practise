/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution {
  public:
  
    Node *revLL(Node *head)
    {
        Node *prev = NULL;
        Node *curr = head;
        Node *tmp;
        
        while(curr != NULL)
        {
            tmp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = tmp;
        }
        return prev;
    }
    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        // Your code here
        Node *slow = head;
        Node *fast = head;
        
        
        while(fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        if(fast != NULL) // odd case 
        {
            slow = slow->next;
        }
        
        Node *r1 = head;
        Node *r2 = revLL(slow); 
        
        
        while(r2 != NULL)
        {
            if(r1->data != r2->data)
            {
                return false;
            }
            r1 = r1->next;
            r2 = r2->next;
        }
        return true; // handle case of if Node is NULL || Node size = 1
    }
};
