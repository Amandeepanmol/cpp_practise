class Solution {
public:
    int firstIdx(vector<int>&nums, int target, int n)
    {
        int start = 0;
        int end = n-1;


        int ans = -1;

        while(start <= end)
        {
            int mid = start+(end-start)/2;
            if(nums[mid] == target)
            {
                ans = mid;
                end = mid-1;
            }
            else if(nums[mid] < target)
            {
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return ans;
    }

    int lastIdx(vector<int>&nums,int target,int n)
    {
        int start = 0;
        int end = n-1;

        int ans = -1;

        while(start <= end)
        {
            int mid = start+(end-start)/2;
            if(nums[mid] == target)
            {
                ans = mid;
                start = mid+1;
            }
            else if(nums[mid] < target)
            {
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        
        int n = nums.size();
        if(n == 0)
        {
            return {-1,-1};
        }
        int a = firstIdx(nums,target,n);
        int b = lastIdx(nums,target,n);

        vector<int>ans = {a,b};
        return ans;
    }
};
