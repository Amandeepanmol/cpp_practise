/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *mergeTwoLL(ListNode *h2, ListNode *h3)
    {
        if(!h2) return h3;
        if(!h3) return h2;

        if(h2->val <= h3->val)
        {
            h2->next = mergeTwoLL(h2->next, h3);
            return h2;
        }
        else
        {
            h3->next = mergeTwoLL(h2, h3->next);
            return h3;
        }
        return NULL;
    }

    ListNode *DC(int start , int end , vector<ListNode*>& lists)
    {
        if(start == end)
        {
            return lists[start];
        }

        int mid = start+(end-start)/2;

        ListNode *l1 = DC(start,mid,lists);
        ListNode *l2 = DC(mid+1,end, lists);

        return mergeTwoLL(l1,l2);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size(); 
        if(n == 0)   // empty list
        {
            return NULL;
        }

        int start = 0;
        int end = n-1;

        return DC(start,end,lists);
    }
};
